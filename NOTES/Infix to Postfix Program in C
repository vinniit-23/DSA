//Infix to Postfix Program in C



// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX 100

char stack[MAX];
int top = -1;

int precedence(char op) {
    switch (op) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
    }
    return 0;
}

void push(char c) {
    if (top == MAX - 1) {
        printf("Stack overflow\n");
        return;
    }
    stack[++top] = c;
}

char pop() {
    if (top == -1) {
        return '\0';  // empty stack
    }
    return stack[top--];
}

char peek() {
    if (top == -1) {
        return '\0';
    }
    return stack[top];
}

int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}

void infixToPostfix(char* infix_input, char* postfix_output) {
    int i = 0, k = 0;
    char c;
    // i for infix, k for postfix, c for check the operator
    
    while ((c = infix_input[i++]) != '\0') {
        if (isspace(c))
        {
            continue;  // ignore spaces
        }
        //checked if the element is number of alphabet if it is add to output
        if(isalnum(c)){
            postfix_output[k++]=c;
        //checked paerenthises 
        } else if (c == '(') {
            push(c);
        } else if (c == ')') {
            while (peek() != '\0' && peek() != '(') {
                postfix_output[k++] = pop();
            }
            pop(); 
            //checked if it is operator or not if it is add to stack
         } else if (isOperator(c)) {
            while (top != -1 && precedence(peek()) >= precedence(c)) {
                if (c == '^' && peek() == '^') // right-associative for '^'
                    break;
                postfix_output[k++] = pop();
            }
            push(c);
            } else {
            printf("Invalid character encountered: %c\n", c);
            exit(1);
        }
    }
        // Resolved Parenthises conflict
        
         while (top != -1) {
        if (peek() == '(') {
            printf("Mismatched parentheses\n");
            exit(1);
        }
        postfix_output[k++] = pop();
    }
    postfix_output[k] = '\0';
}   
        


int main() {
    char infix[MAX], postfix[MAX];
    printf("Enter an infix expression: ");
    fgets(infix, MAX, stdin);

    // Remove newline character if present
    infix[strcspn(infix, "\n")] = '\0';

    infixToPostfix(infix, postfix);

    printf("Postfix expression: %s\n", postfix);
    return 0;
}
